package de.mannheim.ids.wiki;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;

import org.apache.commons.cli.ParseException;
import org.junit.Ignore;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

/**
 * This code is an example how to run the WikiXCESConverter.
 * 
 * It needs the following data:
 * <ul>
 * <li>WikiXML article pages, outputs of WikiXMLConverter, in
 * <code>xml-de/articles</code> folder.</li>
 * <li>an index of WikiXML files generated by WikiXMLCorpusIndexer.sh. To
 * generate the index, run:
 * 
 * <pre>
 * <em>
 *       ./WikiXMLCorpusIndexer.sh articles xml-de/articles articleIndex.xml
 *    </em>
 * </pre>
 * 
 * on a terminal.</li>
 * </ul>
 * 
 * In this example, WikiXML article pages are converted into I5 format and put
 * together in a single corpusfile.
 * 
 * @author margaretha
 */
public class WikiI5ConverterTest {

	@Test
	@Ignore
	public void testIndexingWikiXML() throws IOException, InterruptedException {
		String xmlFolder = "/home/elma/git/WikiXMLConverter/wikixml-de/article";
		String index = "index/dewiki-article-index.xml";

		Process p = Runtime.getRuntime().exec(
				"./WikiXMLCorpusIndexer.sh article " + xmlFolder + " " + index);
		p.waitFor();

		File f = new File(index);
		assertNotNull(f);
	}

	@Test
	public void testCreateConfig() {
		String xmlFolder = "/home/elma/git/WikiXMLConverter/wikixml-de/article";
		String index = "articleIndex.xml";

		int namespacekey = 0;
		String language = "Deutsch";
		String korpusSigle = "WPD17";
		String pageType = "article";

		// The dumpFilename should be in the following format:
		// [2 letter language code]wiki-[year][month][date]-[type]
		String dumpFilename = "dewiki-20170701-sample.xml";
		String outputFile = "i5/dewiki-20170701-article.i5";

		// Set the inflectives file path or null if not available
		String inflectives = "inflectives.xml";
		String encoding = "UTF-8";

		String url = "jdbc:mysql://localhost:3306/database";
		String username = "username";
		String password = "password";
		int maxThreads = 3;

		Configuration config = new Configuration(xmlFolder, namespacekey,
				pageType, dumpFilename, language, korpusSigle, inflectives,
				encoding, outputFile, index, url, username, password,
				maxThreads, "creatorName");

		assertEquals(dumpFilename, config.getDumpFilename());
		assertEquals(outputFile, config.getOutputFile());
		assertEquals(inflectives, config.getInflectives());
		assertEquals(korpusSigle, config.getKorpusSigle());
		assertEquals(encoding, config.getOutputEncoding());
		assertEquals(language, config.getLanguage());
		assertEquals("de", config.getLanguageCode());
		assertEquals("article", config.getPageType());
		assertEquals(xmlFolder, config.getWikiXMLFolder());
		assertEquals(index, config.getWikiXMLIndex());
		assertEquals("2017", config.getYear());
		assertEquals(username, config.getDatabaseUsername());
		assertEquals(url, config.getDatabaseUrl());
	}

	@Test
	public void testWikiI5Processor() throws I5Exception, IOException {
		String propertiesFilename = "i5-dewiki-article.properties";
		Configuration config = new Configuration(propertiesFilename);
		WikiI5Processor processor = new WikiI5Processor(config);
		processor.run();
	}

	@Test
	public void testWikiI5Converter()
			throws I5Exception, IOException, ParseException, SQLException {
		WikiI5Converter converter = new WikiI5Converter();
		converter.main(
				new String[]{"-prop", "i5-dewiki-loeschkandidaten.properties"});
	}

}
