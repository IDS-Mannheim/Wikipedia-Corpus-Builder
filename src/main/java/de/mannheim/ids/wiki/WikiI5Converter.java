package de.mannheim.ids.wiki;

import java.io.IOException;
import java.sql.SQLException;

import org.apache.commons.cli.BasicParser;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;

/**
 * This is the main class for converting the XML-ized Wikipages to I5.
 * 
 * It requires the following data:
 * <ul>
 * <li>WikiXML files, which are outputs of the WikiXMLConverter, e.g. in
 * <code>wikixml-de/article</code> folder.</li>
 * <li>An index of all the WikiXML files, generated by WikiXMLCorpusIndexer.sh.
 * To generate the index, run WikiXMLCorpusIndexer.sh on a terminal in this
 * format:
 * 
 * <pre>
 * ./WikiXMLCorpusIndexer.sh [pageType] [outputFile] [wikiXMLFolder]
 * 
 * Example: ./WikiXMLCorpusIndexer.sh article article-index.xml wikixml-de/article
 * </pre>
 * 
 * </li>
 * <li>A list of inflectives (only provided for German)</li>
 * <li>A database containing a language links table restored from the wiki
 * language link sql dump, for instance, dewiki-20150430-langlinks.sql.</li>
 * </ul>
 * 
 * WikiI5Converter requires the following arguments:
 * <ul>
 * <li>wikidump = Wiki dump filename starting with: [2 character language
 * code]wiki-[year][month][date]</li>
 * <li>page_type = the type of Wikipages (articles or discussions)</li>
 * <li>wikixml_folder = article/discussion folder</li>
 * <li>wikixml_index = index of WikiXML article/discussion pages</li>
 * <li>output_file = Output file</li>
 * <li>output_encoding = encoding for the output, e.g. utf-8 or iso-8859-1</li>
 * <li>inflective_file = innflective file</li>
 * <li>db_url = Mysql database URL, i.e. jdbc:mysql://localhost:port/dbname</li>
 * <li>db_username = Mysql database username</li>
 * <li>db_password = Mysql database password</li>
 * </ul>
 * 
 * An argument configuration example:
 * 
 * 
 * <pre>
 * -x wikixml-de/article -t article -w dewiki-20130728-sample.xml 
 * -o dewiki-20130728-article.i5 -e utf-8 -inf inflectives.xml 
 * -i wikixml-de/article-index.xml -u username -p password 
 * -d jdbc:mysql://localhost:port/dbname
 * </pre>
 * 
 * 
 * 
 * @author margaretha
 */

public class WikiI5Converter {

	private static Options options;

	public WikiI5Converter() {
		options = new Options();
		options.addOption("x", true, "WikiXML article/discussion folder");
		options.addOption("t", true,
				"The type of Wikipages (articles or discussions)");
		options.addOption(
				"w",
				true,
				"Wiki dump file starting with: [2 character "
						+ "language code]wiki-[year][month][date], for example:"
						+ "dewiki-20130728-pages-meta-current.xml");
		options.addOption("o", true, "Output file");
		options.addOption("e", true, "Encoding: utf-8 or iso-8859-1");
		options.addOption("inf", true, "Inflective file");
		options.addOption("i", true,
				"An index of Wiki article/discussion pages");
		options.addOption("u", true, "Mysql database username");
		options.addOption("p", true, "Mysql database password");
		options.addOption("d", true,
				"Mysql database URL, i.e. jdbc:mysql://localhost:port/dbname");
		options.addOption("prop", true, "Properties filename");
	}

	public static void main(String[] args) throws ParseException, IOException,
			I5Exception, SQLException {
		WikiI5Converter converter = new WikiI5Converter();
		Configuration config = converter.createConfig(args);
		WikiI5Processor processor = new WikiI5Processor(config);
		processor.run();
	}

	private Configuration createConfig(String[] args) throws ParseException,
			IOException {
		CommandLineParser parser = new BasicParser();
		CommandLine cmd = parser.parse(options, args);

		String propertiesFilename = cmd.getOptionValue("prop");
		if (propertiesFilename != null) {
			return new Configuration(propertiesFilename);
		}
		else {
			return new Configuration(cmd);
		}
	}

}
