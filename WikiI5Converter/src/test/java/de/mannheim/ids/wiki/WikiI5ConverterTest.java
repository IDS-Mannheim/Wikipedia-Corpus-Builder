package de.mannheim.ids.wiki;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.apache.commons.cli.ParseException;
import org.junit.Test;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * These tests require the following data:
 * <ul>
 * <li>WikiXML article pages, outputs of WikiXMLConverter, e.g. in
 * <code>wikixml-de/articles</code> folder.</li>
 * <li>an index of WikiXML files generated by WikiXMLCorpusIndexer.sh. To
 * generate the index, run in a terminal:
 * 
 * <pre>
 * ./WikiXMLCorpusIndexer.sh articles xml-de/articles articleIndex.xml
 * </pre>
 * 
 * </li>
 * </ul>
 * 
 * Some tests also require customizing properties files.
 * You may use your own properties files.
 * 
 * @author margaretha
 */
public class WikiI5ConverterTest {

	@Test
	public void testCreateConfig() {
		String xmlFolder = "wikixml-de/article";
		String index = "index/dewiki-article-index.xml";

		int namespacekey = 0;
		String language = "Deutsch";
		String korpusSigle = "WPD17";
		String pageType = "article";

		// The dumpFilename should be in the following format:
		// [2 letter language code]wiki-[year][month][date]-[type]
		String dumpFilename = "dewiki-20170701-sample.xml";
		String outputFile = "i5/dewiki-20170701-article.i5";

		// Set the inflectives file path or null if not available
		String inflectives = "inflectives.xml";
		String encoding = "UTF-8";

		String url = "jdbc:mysql://localhost:3306/database";
		String username = "username";
		String password = "password";
		int maxThreads = 3;

		Configuration config = new Configuration(xmlFolder, namespacekey,
				pageType, dumpFilename, language, korpusSigle, inflectives,
				encoding, outputFile, index, url, username, password,
				maxThreads, "creatorName");

		assertEquals(dumpFilename, config.getDumpFilename());
		assertEquals(outputFile, config.getOutputFile());
		assertEquals(inflectives, config.getInflectives());
		assertEquals(korpusSigle, config.getKorpusSigle());
		assertEquals(encoding, config.getOutputEncoding());
		assertEquals(language, config.getLanguage());
		assertEquals("de", config.getLanguageCode());
		assertEquals("article", config.getPageType());
		assertEquals(xmlFolder, config.getWikiXMLFolder());
		assertEquals(index, config.getWikiXMLIndex());
		assertEquals("2017", config.getYear());
		assertEquals(username, config.getDatabaseUsername());
		assertEquals(url, config.getDatabaseUrl());
	}

	/**
	 * This test builds index file for wikixml of German articles. The index may
	 * be used for instance for testWikiI5Processor.
	 * 
	 * @throws IOException
	 * @throws InterruptedException
	 * @throws ParserConfigurationException
	 * @throws SAXException
	 * @throws I5Exception
	 */
	@Test
	public void testIndexingWikiXML() throws IOException, InterruptedException,
			ParserConfigurationException, SAXException, I5Exception {
		String type = "article";
		String xmlFolder = "../WikiXMLConverter/wikixml-de/" + type+"/";
		String index = "index/dewiki-" + type + "-index.xml";

		Process p = Runtime.getRuntime().exec(
				"./WikiXMLCorpusIndexer.sh " + type + " " + xmlFolder + " "
						+ index);
		p.waitFor();

		File f = new File(index);
		assertNotNull(f);

		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder = dbFactory.newDocumentBuilder();
		Document doc = builder.parse(f);
		NodeList list = doc.getElementsByTagName("index");
		assertTrue(list.getLength() > 0);

	}

	/**
	 * This test requires wikixml folder and its index file
	 * 
	 * @throws I5Exception
	 * @throws IOException
	 * @throws SAXException
	 * @throws ParserConfigurationException
	 */
	@Test
	public void testWikiI5Processor() throws I5Exception, IOException,
			SAXException, ParserConfigurationException {
		// ATTENTION: update the properties file according to your settings.
		String propertiesFilename = "dewiki-article.properties";
		Configuration config = new Configuration(propertiesFilename);
		WikiI5Processor processor = new WikiI5Processor(config);
		processor.run();

		String outputFile = config.getOutputFile();
		testI5File(outputFile);
	}

	/**
	 * This test requires wikixml folder and its index file
	 * 
	 * @throws I5Exception
	 * @throws IOException
	 * @throws ParseException
	 * @throws SQLException
	 * @throws SAXException
	 * @throws ParserConfigurationException
	 */
	@Test
	public void testWikiI5Converter()
			throws I5Exception, IOException, ParseException, SQLException,
			ParserConfigurationException, SAXException {
		// ATTENTION: update the properties file according to your settings
		WikiI5Converter.main(
				new String[]{"-prop", "dewiki-article.properties"});

		// ATTENTION: Update the outfile path according to your setting
		String outputFile = "i5/dewiki-20170701-article.i5.xml";
		testI5File(outputFile);
	}

	private void testI5File(String outputFile)
			throws ParserConfigurationException, SAXException, IOException {
		File f = new File(outputFile);
		assertNotNull(f);

		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder = dbFactory.newDocumentBuilder();
		Document doc = builder.parse(f);
		NodeList list = doc.getElementsByTagName("text");
		assertTrue(list.getLength() > 0);

		String textContent = list.item(0).getTextContent();
		assertTrue(textContent != null);
		assertTrue(!textContent.isEmpty());
	}
}
